<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="NEXYS4_total"/>
    <a name="downloadFrequency" val="1.0"/>
    <a name="simulationFrequency" val="512000.0"/>
    <boardmap boardname="NEXYS4_DDR">
      <mc key="/annode_0" map="107,271"/>
      <mc key="/annode_1" map="140,271"/>
      <mc key="/annode_2" map="172,271"/>
      <mc key="/annode_3" map="206,271"/>
      <mc key="/annode_4" map="240,271"/>
      <mc key="/annode_5" map="273,271"/>
    </boardmap>
    <boardmap boardname="NEXYS4_total">
      <mc key="/Reset" map="555,233"/>
      <mc key="/annode_0" map="159,278"/>
      <mc key="/annode_1" map="210,277"/>
      <mc key="/annode_2" map="255,277"/>
      <mc key="/annode_3" map="300,277"/>
      <mc key="/annode_4" map="352,279"/>
      <mc key="/annode_5" map="398,278"/>
      <mc key="/annode_6" map="447,279"/>
      <mc key="/annode_7" map="490,279"/>
      <mc key="/cathodes" pmap="160_293_0,181_294_0,181_314_0,162_329_0,151_313_0,151_295_0,162_313_0,192_323_0"/>
      <mc key="/ps2_clk" map="235,41"/>
      <mc key="/ps2_ser" map="235,61"/>
      <mc key="/sys_clk" map="303,187"/>
    </boardmap>
    <comp lib="0" loc="(120,240)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="sys_clk"/>
    </comp>
    <comp lib="0" loc="(140,280)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Reset"/>
    </comp>
    <comp lib="0" loc="(140,600)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="ps2_clk"/>
    </comp>
    <comp lib="0" loc="(140,650)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="ps2_ser"/>
    </comp>
    <comp lib="0" loc="(1690,510)" name="Constant">
      <a name="value" val="0x0"/>
    </comp>
    <comp lib="0" loc="(1950,210)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="cathodes"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1950,510)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="annode_0"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1950,530)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="annode_1"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1950,550)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="annode_2"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1950,570)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="annode_3"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1950,590)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="annode_4"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1950,610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="annode_5"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1950,630)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="annode_6"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1950,650)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="annode_7"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(310,210)" name="Splitter">
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(540,100)" name="Splitter">
      <a name="fanout" val="3"/>
      <a name="incoming" val="3"/>
    </comp>
    <comp lib="0" loc="(570,150)" name="Splitter">
      <a name="fanout" val="3"/>
      <a name="incoming" val="3"/>
    </comp>
    <comp lib="0" loc="(840,300)" name="Splitter">
      <a name="fanout" val="8"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="0" loc="(950,300)" name="Constant">
      <a name="value" val="0x0"/>
    </comp>
    <comp lib="1" loc="(1010,550)" name="AND Gate">
      <a name="facing" val="north"/>
    </comp>
    <comp lib="1" loc="(1010,700)" name="NOT Gate"/>
    <comp lib="8" loc="(1210,45)" name="Text">
      <a name="text" val="to implement in the real circuit:"/>
    </comp>
    <comp lib="8" loc="(1210,70)" name="Text">
      <a name="text" val="add decoder 7sd, eliminate the d flip-flop"/>
    </comp>
    <comp lib="8" loc="(140,225)" name="Text">
      <a name="text" val="clk"/>
    </comp>
    <comp lib="8" loc="(140,305)" name="Text">
      <a name="text" val="reset"/>
    </comp>
    <comp lib="8" loc="(150,580)" name="Text">
      <a name="text" val="ps2 clk"/>
    </comp>
    <comp lib="8" loc="(150,675)" name="Text">
      <a name="text" val="ps2 ser"/>
    </comp>
    <comp loc="(1020,350)" name="decoder7sd">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="decoder7sd_1"/>
    </comp>
    <comp loc="(1400,210)" name="display_buffer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="display_buffer_1"/>
    </comp>
    <comp loc="(1410,400)" name="counter16bit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="counter16bit_1"/>
    </comp>
    <comp loc="(1680,400)" name="counter3bit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="counter3bit_1"/>
    </comp>
    <comp loc="(1950,210)" name="mux8to1_8bit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="mux8to1_8bit_1"/>
    </comp>
    <comp loc="(1950,510)" name="dmux8to1">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="dmux8to1_1"/>
    </comp>
    <comp loc="(470,570)" name="clk_sync">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="clk_sync_1"/>
    </comp>
    <comp loc="(480,310)" name="d_flip_flop">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="d_flip_flop_1"/>
    </comp>
    <comp loc="(480,380)" name="d_flip_flop">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="d_flip_flop_2"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(480,450)" name="d_flip_flop">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="d_flip_flop_3"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(490,90)" name="CU_ROM">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="cu_rom_1"/>
    </comp>
    <comp loc="(710,860)" name="modulo11_counter">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="modulo11_counter_1"/>
    </comp>
    <comp loc="(720,630)" name="shift_register_11bit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="shift_register_11bit_1"/>
    </comp>
    <comp loc="(770,220)" name="MUX8TO1WHICHIS1BIT">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="mux8to1whichis1bit_1"/>
    </comp>
    <comp loc="(880,110)" name="CU_Outputs">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="cu_outputs_1"/>
    </comp>
    <comp loc="(970,630)" name="validation_unit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="validation_unit_1"/>
    </comp>
    <comp loc="(970,700)" name="eo_verif_unit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="eo_verif_unit_1"/>
    </comp>
    <comp loc="(970,760)" name="fo_verif_unit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="fo_verif_unit_1"/>
    </comp>
    <comp loc="(970,810)" name="enter_verif_unit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="enter_verif_unit_1"/>
    </comp>
    <wire from="(1010,480)" to="(1010,550)"/>
    <wire from="(1010,480)" to="(1030,480)"/>
    <wire from="(1010,700)" to="(1030,700)"/>
    <wire from="(1020,350)" to="(1110,350)"/>
    <wire from="(1030,240)" to="(1030,480)"/>
    <wire from="(1030,600)" to="(1030,700)"/>
    <wire from="(1050,230)" to="(1050,260)"/>
    <wire from="(1050,260)" to="(1050,860)"/>
    <wire from="(1060,250)" to="(1060,760)"/>
    <wire from="(1070,270)" to="(1070,810)"/>
    <wire from="(1110,210)" to="(1110,350)"/>
    <wire from="(1110,210)" to="(1180,210)"/>
    <wire from="(1140,130)" to="(1140,270)"/>
    <wire from="(1140,270)" to="(1180,270)"/>
    <wire from="(1150,250)" to="(1150,400)"/>
    <wire from="(1150,250)" to="(1180,250)"/>
    <wire from="(1150,400)" to="(1150,460)"/>
    <wire from="(1150,400)" to="(1190,400)"/>
    <wire from="(1150,460)" to="(1150,530)"/>
    <wire from="(1150,460)" to="(1450,460)"/>
    <wire from="(1160,110)" to="(1160,230)"/>
    <wire from="(1160,230)" to="(1180,230)"/>
    <wire from="(1180,210)" to="(1190,210)"/>
    <wire from="(120,240)" to="(240,240)"/>
    <wire from="(140,280)" to="(180,280)"/>
    <wire from="(140,600)" to="(220,600)"/>
    <wire from="(140,650)" to="(500,650)"/>
    <wire from="(1400,210)" to="(1430,210)"/>
    <wire from="(1400,230)" to="(1440,230)"/>
    <wire from="(1400,250)" to="(1450,250)"/>
    <wire from="(1400,270)" to="(1460,270)"/>
    <wire from="(1400,290)" to="(1470,290)"/>
    <wire from="(1400,310)" to="(1480,310)"/>
    <wire from="(1400,330)" to="(1490,330)"/>
    <wire from="(1400,350)" to="(1500,350)"/>
    <wire from="(1410,420)" to="(1460,420)"/>
    <wire from="(1430,210)" to="(1730,210)"/>
    <wire from="(1430,50)" to="(1430,210)"/>
    <wire from="(1440,230)" to="(1730,230)"/>
    <wire from="(1440,70)" to="(1440,230)"/>
    <wire from="(1450,250)" to="(1730,250)"/>
    <wire from="(1450,400)" to="(1450,460)"/>
    <wire from="(1450,400)" to="(1460,400)"/>
    <wire from="(1450,90)" to="(1450,250)"/>
    <wire from="(1460,110)" to="(1460,270)"/>
    <wire from="(1460,270)" to="(1730,270)"/>
    <wire from="(1470,130)" to="(1470,290)"/>
    <wire from="(1470,290)" to="(1730,290)"/>
    <wire from="(1480,150)" to="(1480,310)"/>
    <wire from="(1480,310)" to="(1730,310)"/>
    <wire from="(1490,170)" to="(1490,330)"/>
    <wire from="(1490,330)" to="(1730,330)"/>
    <wire from="(1500,190)" to="(1500,350)"/>
    <wire from="(1500,350)" to="(1730,350)"/>
    <wire from="(1680,400)" to="(1710,400)"/>
    <wire from="(1690,510)" to="(1730,510)"/>
    <wire from="(1710,370)" to="(1710,400)"/>
    <wire from="(1710,370)" to="(1730,370)"/>
    <wire from="(1710,400)" to="(1710,530)"/>
    <wire from="(1710,530)" to="(1730,530)"/>
    <wire from="(180,280)" to="(180,590)"/>
    <wire from="(180,590)" to="(200,590)"/>
    <wire from="(190,470)" to="(260,470)"/>
    <wire from="(190,50)" to="(190,470)"/>
    <wire from="(190,50)" to="(580,50)"/>
    <wire from="(200,400)" to="(260,400)"/>
    <wire from="(200,590)" to="(200,670)"/>
    <wire from="(200,60)" to="(200,400)"/>
    <wire from="(200,60)" to="(570,60)"/>
    <wire from="(200,670)" to="(200,880)"/>
    <wire from="(200,670)" to="(500,670)"/>
    <wire from="(200,880)" to="(490,880)"/>
    <wire from="(210,330)" to="(260,330)"/>
    <wire from="(210,70)" to="(210,330)"/>
    <wire from="(210,70)" to="(560,70)"/>
    <wire from="(220,590)" to="(220,600)"/>
    <wire from="(220,590)" to="(250,590)"/>
    <wire from="(240,240)" to="(240,310)"/>
    <wire from="(240,310)" to="(240,380)"/>
    <wire from="(240,310)" to="(260,310)"/>
    <wire from="(240,380)" to="(240,450)"/>
    <wire from="(240,380)" to="(260,380)"/>
    <wire from="(240,450)" to="(240,530)"/>
    <wire from="(240,450)" to="(260,450)"/>
    <wire from="(240,530)" to="(1150,530)"/>
    <wire from="(240,530)" to="(240,570)"/>
    <wire from="(240,570)" to="(250,570)"/>
    <wire from="(250,590)" to="(260,590)"/>
    <wire from="(260,140)" to="(310,140)"/>
    <wire from="(260,90)" to="(260,140)"/>
    <wire from="(260,90)" to="(270,90)"/>
    <wire from="(310,140)" to="(310,210)"/>
    <wire from="(320,200)" to="(330,200)"/>
    <wire from="(330,170)" to="(520,170)"/>
    <wire from="(330,180)" to="(510,180)"/>
    <wire from="(330,190)" to="(500,190)"/>
    <wire from="(330,200)" to="(780,200)"/>
    <wire from="(470,570)" to="(490,570)"/>
    <wire from="(480,310)" to="(520,310)"/>
    <wire from="(480,380)" to="(510,380)"/>
    <wire from="(480,450)" to="(500,450)"/>
    <wire from="(490,570)" to="(490,630)"/>
    <wire from="(490,570)" to="(610,570)"/>
    <wire from="(490,630)" to="(490,860)"/>
    <wire from="(490,630)" to="(500,630)"/>
    <wire from="(490,90)" to="(510,90)"/>
    <wire from="(500,140)" to="(500,190)"/>
    <wire from="(500,140)" to="(590,140)"/>
    <wire from="(500,190)" to="(500,450)"/>
    <wire from="(510,100)" to="(540,100)"/>
    <wire from="(510,130)" to="(510,180)"/>
    <wire from="(510,130)" to="(590,130)"/>
    <wire from="(510,180)" to="(510,380)"/>
    <wire from="(510,90)" to="(510,100)"/>
    <wire from="(520,120)" to="(520,170)"/>
    <wire from="(520,120)" to="(590,120)"/>
    <wire from="(520,170)" to="(520,310)"/>
    <wire from="(530,220)" to="(530,290)"/>
    <wire from="(530,220)" to="(550,220)"/>
    <wire from="(530,290)" to="(790,290)"/>
    <wire from="(540,170)" to="(540,240)"/>
    <wire from="(540,170)" to="(610,170)"/>
    <wire from="(540,240)" to="(550,240)"/>
    <wire from="(560,80)" to="(570,80)"/>
    <wire from="(560,90)" to="(580,90)"/>
    <wire from="(570,150)" to="(610,150)"/>
    <wire from="(570,60)" to="(570,80)"/>
    <wire from="(580,50)" to="(580,90)"/>
    <wire from="(610,150)" to="(610,170)"/>
    <wire from="(610,150)" to="(640,150)"/>
    <wire from="(610,310)" to="(610,570)"/>
    <wire from="(610,310)" to="(910,310)"/>
    <wire from="(640,110)" to="(640,150)"/>
    <wire from="(640,110)" to="(660,110)"/>
    <wire from="(710,630)" to="(720,630)"/>
    <wire from="(710,860)" to="(1050,860)"/>
    <wire from="(720,630)" to="(730,630)"/>
    <wire from="(720,650)" to="(740,650)"/>
    <wire from="(730,630)" to="(730,700)"/>
    <wire from="(730,630)" to="(750,630)"/>
    <wire from="(730,700)" to="(730,760)"/>
    <wire from="(730,700)" to="(750,700)"/>
    <wire from="(730,760)" to="(730,810)"/>
    <wire from="(730,760)" to="(750,760)"/>
    <wire from="(730,810)" to="(750,810)"/>
    <wire from="(740,380)" to="(740,650)"/>
    <wire from="(740,380)" to="(790,380)"/>
    <wire from="(770,220)" to="(780,220)"/>
    <wire from="(780,200)" to="(780,220)"/>
    <wire from="(790,240)" to="(790,290)"/>
    <wire from="(790,240)" to="(830,240)"/>
    <wire from="(790,350)" to="(790,380)"/>
    <wire from="(790,350)" to="(800,350)"/>
    <wire from="(830,240)" to="(830,300)"/>
    <wire from="(830,300)" to="(840,300)"/>
    <wire from="(860,220)" to="(910,220)"/>
    <wire from="(860,230)" to="(1050,230)"/>
    <wire from="(860,240)" to="(1030,240)"/>
    <wire from="(860,250)" to="(1060,250)"/>
    <wire from="(860,260)" to="(1050,260)"/>
    <wire from="(860,270)" to="(1070,270)"/>
    <wire from="(860,280)" to="(860,290)"/>
    <wire from="(860,290)" to="(950,290)"/>
    <wire from="(880,110)" to="(1160,110)"/>
    <wire from="(880,130)" to="(1140,130)"/>
    <wire from="(910,220)" to="(910,310)"/>
    <wire from="(950,290)" to="(950,300)"/>
    <wire from="(970,630)" to="(990,630)"/>
    <wire from="(970,700)" to="(980,700)"/>
    <wire from="(970,760)" to="(1060,760)"/>
    <wire from="(970,810)" to="(1070,810)"/>
    <wire from="(990,600)" to="(990,630)"/>
  </circuit>
  <vhdl name="CU_ROM">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY CU_ROM IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    address        : IN  std_logic_vector(3 DOWNTO 0); -- input vector example
  ------------------------------------------------------------------------------
  --Insert output ports below
    content        : OUT std_logic_vector(2 DOWNTO 0)  -- output vector example
    );
END CU_ROM;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF CU_ROM IS

BEGIN

	process (address)
		begin
		case address is
		when "0000" =&gt; content &lt;= "001";
		when "1000" =&gt; content &lt;= "000";
		when "0001" =&gt; content &lt;= "001";
		when "1001" =&gt; content &lt;= "011";
		when "0010" =&gt; content &lt;= "000";
		when "1010" =&gt; content &lt;= "011";
		when "0011" =&gt; content &lt;= "101";
		when "1011" =&gt; content &lt;= "100";
		when "0101" =&gt; content &lt;= "110";
		when "1101" =&gt; content &lt;= "111";
		when "0100" =&gt; content &lt;= "100";
		when "1100" =&gt; content &lt;= "000";
		when "0110" =&gt; content &lt;= "000";
		when "1110" =&gt; content &lt;= "000";
		when "0111" =&gt; content &lt;= "000";
		when "1111" =&gt; content &lt;= "000";
		when others =&gt; content &lt;= "000";

		end case;
	end process;
END TypeArchitecture;</vhdl>
  <vhdl name="CU_Outputs">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY CU_Outputs IS&#13;
  PORT (&#13;
	state 	: IN std_logic_vector(2 downto 0);
	en_shift 	: OUT std_logic;
	clear	: OUT std_logic
  );
END CU_Outputs;&#13;
&#13;
ARCHITECTURE TypeArchitecture OF CU_Outputs IS&#13;
&#13;
BEGIN&#13;

&#13;process(state) is
begin
	if state = "110" then 
		en_shift &lt;= '1';
	else 
		en_shift &lt;= '0';
	end if;
	if state = "111" then
		clear &lt;= '1';
	else 
		clear &lt;= '0';
	end if;
end process;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="d_flip_flop">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY d_flip_flop IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock      : IN  std_logic;                    -- input bit example
    d        	: IN  std_logic; -- input vector example
  ------------------------------------------------------------------------------
  --Insert output ports below
    q        : OUT std_logic
    );
END d_flip_flop;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF d_flip_flop IS

BEGIN

	process(clock) is
	variable internal_state : std_logic := '0';
	begin
		if(rising_edge(clock)) then
			internal_state := d;
		end if;
		q &lt;= internal_state;
	end process;
END TypeArchitecture;</vhdl>
  <vhdl name="MUX8TO1WHICHIS1BIT">
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY MUX8TO1WHICHIS1BIT IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    val        : IN  std_logic_vector(7 DOWNTO 0); -- input vector example
    sel 		: IN  std_logic_vector(2 downto 0); -- selection bit
  ------------------------------------------------------------------------------
  --Insert output ports below
    output        : OUT std_logic                -- output bit example
    );
END MUX8TO1WHICHIS1BIT;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF MUX8TO1WHICHIS1BIT IS

BEGIN

	process(val, sel)
		begin
			case sel is
			when "000" =&gt; output &lt;= val(0);
			when "001" =&gt; output &lt;= val(1);
			when "010" =&gt; output &lt;= val(2);
			when "011" =&gt; output &lt;= val(3);
			when "100" =&gt; output &lt;= val(4);
			when "101" =&gt; output &lt;= val(5);
			when "110" =&gt; output &lt;= val(6);
			when "111" =&gt; output &lt;= val(7);
			when others =&gt; output &lt;= '0';
	end case;

	end process;
END TypeArchitecture;</vhdl>
  <vhdl name="decoder7sd">-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY decoder7sd IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    address      : IN  std_logic_vector (7 downto 0);                    -- input bit example
  ------------------------------------------------------------------------------
  --Insert output ports below
    content        : OUT std_logic_vector (7 DOWNTO 0)  -- output vector example
    );
END decoder7sd;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF decoder7sd IS
BEGIN

	process(address)
		begin
			case address is 
				when x"16" =&gt; content &lt;= b"01100000"; --1
				when x"1E" =&gt; content &lt;= b"11011010"; --2
				when x"26" =&gt; content &lt;= b"11110010"; --3
				when x"25" =&gt; content &lt;= b"01100110"; --4
				when x"2E" =&gt; content &lt;= b"10110110"; --5
				when x"36" =&gt; content &lt;= b"10111110"; --6
				when x"3D" =&gt; content &lt;= b"11100000"; --7
				when x"3E" =&gt; content &lt;= b"11111110"; --8
				when x"46" =&gt; content &lt;= b"11110110"; --9
				when x"45" =&gt; content &lt;= b"11111100"; --0
				when x"15" =&gt; content &lt;= b"11111101"; --q
				when x"44" =&gt; content &lt;= b"11111100"; --o
				when x"1D" =&gt; content &lt;= b"01111110"; --w
				when x"24" =&gt; content &lt;= b"10011110"; --e
				when x"2D" =&gt; content &lt;= b"00001010"; --small r
				when x"2C" =&gt; content &lt;= b"00011110"; --small t
				when x"35" =&gt; content &lt;= b"01110110"; --small y
				when x"3C" =&gt; content &lt;= b"01111100"; --U
				when x"43" =&gt; content &lt;= b"00001100"; --I
				when x"4D" =&gt; content &lt;= b"11001110"; --P
				when x"1C" =&gt; content &lt;= b"11101110"; --A
				when x"1B" =&gt; content &lt;= b"10110110"; --S
				when x"23" =&gt; content &lt;= b"11111100"; --D
				when x"2B" =&gt; content &lt;= b"10001110"; --F
				when x"34" =&gt; content &lt;= b"10111100"; --G
				when x"33" =&gt; content &lt;= b"01101110"; --H
				when x"3B" =&gt; content &lt;= b"01111000"; --J
				when x"42" =&gt; content &lt;= b"10101110"; --K 
				when x"4B" =&gt; content &lt;= b"00011100"; --L
				when x"1A" =&gt; content &lt;= b"00001100"; --Z
				when x"22" =&gt; content &lt;= b"10010010"; --x
				when x"21" =&gt; content &lt;= b"10011100"; --C
				when x"2A" =&gt; content &lt;= b"01010100"; --V
				when x"32" =&gt; content &lt;= b"11111110"; --B
				when x"31" =&gt; content &lt;= b"00101010"; --small N
				when x"3A" =&gt; content &lt;= b"11010100"; --M
				when x"41" =&gt; content &lt;= b"00000001"; --,
				when x"49" =&gt; content &lt;= b"00000001"; --.

				when others =&gt;content&lt;=  b"00000000"; 
		end case;
	end process;
END TypeArchitecture;</vhdl>
  <vhdl name="display_buffer">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY display_buffer IS
  PORT (
    data_in	: IN std_logic_vector(7 downto 0);
    enable	: IN std_logic;
    clk		: IN std_logic;
    reset		: IN std_logic;

    data_out0	: OUT std_logic_vector(7 downto 0);
    data_out1	: OUT std_logic_vector(7 downto 0);
    data_out2	: OUT std_logic_vector(7 downto 0);
    data_out3	: OUT std_logic_vector(7 downto 0);
    data_out4	: OUT std_logic_vector(7 downto 0);
    data_out5	: OUT std_logic_vector(7 downto 0);
    data_out6	: OUT std_logic_vector(7 downto 0);
    data_out7	: OUT std_logic_vector(7 downto 0)
    );
END display_buffer;


ARCHITECTURE TypeArchitecture OF display_buffer IS

type t_Memory is array (7 downto 0) of std_logic_vector(7 downto 0);--type of data to store the contents of the shift register

BEGIN


process(clk) is
variable reg : t_Memory := (others =&gt; "00000000");
begin
	if(clk'event AND clk='0') then
		if(reset = '1') then
			reg := (others =&gt; "00000000");
		elsif(enable = '1') then
			reg := data_in &amp; reg(7 downto 1);
		end if;
		data_out0 &lt;= reg(0);
		data_out1 &lt;= reg(1);
		data_out2 &lt;= reg(2);
		data_out3 &lt;= reg(3);
		data_out4 &lt;= reg(4);
		data_out5 &lt;= reg(5);
		data_out6 &lt;= reg(6);
		data_out7 &lt;= reg(7);
		 
	end if;
end process;

END TypeArchitecture;
</vhdl>
  <vhdl name="counter16bit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE IEEE.NUMERIC_STD.ALL;

ENTITY counter16bit IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock      : IN  std_logic;                    -- input bit example
  ------------------------------------------------------------------------------
  --Insert output ports below
  	value	   : OUT std_logic_vector (15 downto 0);
    tCount        : OUT std_logic                    -- output bit example
    );
END counter16bit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF counter16bit IS

BEGIN


process(clock)
	variable internal_state : natural range 0 to 2**16-1 := 0;
	begin
	tCount &lt;= '0';
	if(clock'event AND clock='1') then
		if(internal_state = 65535) then
			tCount &lt;= '1';
			internal_state := 0;
		else
			tCount &lt;= '0';
			internal_state := internal_state + 1;
		end if;
	end if;
	value &lt;= std_logic_vector(to_unsigned(internal_state,16));
end process;

END TypeArchitecture;
</vhdl>
  <vhdl name="counter3bit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE IEEE.NUMERIC_STD.ALL;

ENTITY counter3bit IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock      : IN  std_logic;                    -- input bit example
    enable      : IN std_logic;
  ------------------------------------------------------------------------------
  --Insert output ports below
  	value	   : OUT std_logic_vector (2 downto 0)
    );
END counter3bit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF counter3bit IS

BEGIN


process(clock)
	variable internal_state : natural range 0 to 7 := 0;
	begin
	if(clock'event AND clock='0' AND enable='1') then
		if(internal_state = 7) then
			internal_state := 0;
		else
			internal_state := internal_state + 1;
		end if;
	end if;
	value &lt;= std_logic_vector(to_unsigned(internal_state,3));
end process;

END TypeArchitecture;
</vhdl>
  <vhdl name="dmux8to1">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY dmux8to1 IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    val        : IN  std_logic;
    sel		: IN  std_logic_vector(2 downto 0);
  ------------------------------------------------------------------------------
  --Insert output ports below
    y0		: OUT std_logic;
    y1		: OUT std_logic;
    y2		: OUT std_logic;
    y3		: OUT std_logic;
    y4		: OUT std_logic;
    y5		: OUT std_logic;
    y6		: OUT std_logic;
    y7		: OUT std_logic
    );
END dmux8to1;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF dmux8to1 IS
	
BEGIN

process(val,sel)
begin
	y0&lt;='1';
	y1&lt;='1';
	y2&lt;='1';
	y3&lt;='1';
	y4&lt;='1';
	y5&lt;='1';
	y6&lt;='1';
	y7&lt;='1';
	case sel is
	when "000" =&gt;
		y0 &lt;= val;
	when "001" =&gt;
		y1 &lt;= val;
	when "010" =&gt;
		y2 &lt;= val;
	when "011" =&gt;
		y3 &lt;= val;
	when "100" =&gt;
		y4 &lt;= val;
	when "101" =&gt;
		y5 &lt;= val;
	when "110" =&gt;
		y6 &lt;= val;
	when "111" =&gt;
		y7 &lt;= val;
	when others =&gt;
		y0&lt;='1';
		y1&lt;='1';
		y2&lt;='1';
		y3&lt;='1';
		y4&lt;='1';
		y5&lt;='1';
		y6&lt;='1';
		y7&lt;='1';
	end case;
end process;

END TypeArchitecture;
</vhdl>
  <vhdl name="mux8to1_8bit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux8to1_8bit IS
  PORT (
  	in0	: IN std_logic_vector(7 downto 0);
  	in1	: IN std_logic_vector(7 downto 0);
  	in2	: IN std_logic_vector(7 downto 0);
  	in3	: IN std_logic_vector(7 downto 0);
  	in4	: IN std_logic_vector(7 downto 0);
  	in5	: IN std_logic_vector(7 downto 0);
  	in6	: IN std_logic_vector(7 downto 0);
  	in7	: IN std_logic_vector(7 downto 0);
  	sel  : IN std_logic_vector(2 downto 0);

	y	: OUT std_logic_vector(7 downto 0)
    );
END mux8to1_8bit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF mux8to1_8bit IS
BEGIN

process(sel,in0,in1,in2,in3,in4,in5,in6,in7)
begin
	case sel is
	when "000" =&gt;
		y &lt;= in0;
	when "001" =&gt;
		y &lt;= in1;
	when "010" =&gt;
		y &lt;= in2;
	when "011" =&gt;
		y &lt;= in3;
	when "100" =&gt;
		y &lt;= in4;
	when "101" =&gt;
		y &lt;= in5;
	when "110" =&gt;
		y &lt;= in6;
	when "111" =&gt;
		y &lt;= in7;
	when others =&gt;
		y&lt;= (others =&gt; '0');
	end case;
end process;

END TypeArchitecture;
</vhdl>
  <vhdl name="shift_register_11bit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY shift_register_11bit IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clk      : IN  std_logic; --clk signal, synchronized to the ps2 clock               
    sin      : IN  std_logic; --serial input
    reset	   : IN 	std_logic;
  ------------------------------------------------------------------------------
  --Insert output ports below
    q	   :	OUT std_logic_vector(10 downto 0); --output of the register
    q8	   : OUT std_logic_vector(8 downto 1)
    );
END shift_register_11bit;

ARCHITECTURE TypeArchitecture OF shift_register_11bit IS

BEGIN

process(clk) is
variable reg : std_logic_vector(10 downto 0) := (others=&gt;'0'); --variable to store the internal state of the register
begin
	if(clk'event AND clk='0') then --detecting fallin edge
		if(reset = '1') then
			reg := (others =&gt; '0');	
		else
			reg := sin &amp; reg(10 downto 1);
		end if;
	end if;
	q &lt;= reg;
	q8 &lt;= reg(8 downto 1);
end process;	

END TypeArchitecture;
</vhdl>
  <vhdl name="modulo11_counter">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY modulo11_counter IS
  PORT (
    clk	: IN  std_logic;--clock signal
    reset : IN std_logic;
    tc	: OUT std_logic--terminal count
    );
END modulo11_counter;

ARCHITECTURE TypeArchitecture OF modulo11_counter IS

BEGIN

process(clk) is
variable count : natural range 0 to 10 := 0;--internal state of the counter

begin
	if(clk'event AND clk='0') then --detecting the falling edge
		if(reset = '1') then
			count := 0;
			tc &lt;= '0';
		elsif(count = 10) then
			count := 0;
			tc &lt;= '1';
		else 
			count := count + 1;
			tc &lt;= '0';
		end if;
	end if;
end process;
END TypeArchitecture;
</vhdl>
  <vhdl name="validation_unit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY validation_unit IS
  PORT (
  c		: IN std_logic_vector(10 downto 0);--code read from the keyboard
  valid 	: OUT std_logic
   );
END validation_unit;


ARCHITECTURE TypeArchitecture OF validation_unit IS
BEGIN
process(c)
variable parity : std_logic := '0';--here we store the parity of the 8 data bits
begin

	--calculate the parity of the data bits
	--for i in 1 to 9 loop--data bits are on position 1 to 8 of the code and pairty bit on 9
		parity := c(1) xor c(2) xor c(3) xor c(4) xor c(5) xor c(6) xor c(7) xor c(8) xor c(9);
	--end loop;
	--coditions for checking if the signal is valid
	if(c(0) = '0' AND C(10)='1' AND parity='1') then
		valid &lt;= '1';
	else 
		valid &lt;= '0';
	end if;
end process;
END TypeArchitecture;

</vhdl>
  <vhdl name="eo_verif_unit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY eo_verif_unit IS
  PORT (
  c		: IN std_logic_vector(10 downto 0);--code read from the keyboard
  valid 	: OUT std_logic
   );
END eo_verif_unit;


ARCHITECTURE TypeArchitecture OF eo_verif_unit IS
BEGIN
process(c)
begin
	if(c(8 downto 1) = x"E0") then
		valid &lt;= '1';
	else
		valid &lt;= '0';
	end if;
end process;
END TypeArchitecture;
</vhdl>
  <vhdl name="fo_verif_unit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY fo_verif_unit IS
  PORT (
  c		: IN std_logic_vector(10 downto 0);--code read from the keyboard
  valid 	: OUT std_logic
   );
END fo_verif_unit;


ARCHITECTURE TypeArchitecture OF fo_verif_unit IS
BEGIN
process(c)
begin
	if(c(8 downto 1) = x"F0") then
		valid &lt;= '1';
	else
		valid &lt;= '0';
	end if;
end process;
END TypeArchitecture;
</vhdl>
  <vhdl name="enter_verif_unit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY enter_verif_unit IS
  PORT (
  c		: IN std_logic_vector(10 downto 0);--code read from the keyboard
  valid 	: OUT std_logic
   );
END enter_verif_unit;


ARCHITECTURE TypeArchitecture OF enter_verif_unit IS
BEGIN
process(c)
begin
	if(c(8 downto 1) = x"5A") then
		valid &lt;= '1';
	else
		valid &lt;= '0';
	end if;
end process;
END TypeArchitecture;
</vhdl>
  <vhdl name="clk_sync">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY clk_sync IS
  PORT (
  sys_clk : IN std_logic;
  ps2_clk : IN	std_logic;

  synced  : OUT std_logic
  );

END clk_sync;

ARCHITECTURE TypeArchitecture OF clk_sync IS

BEGIN
process(sys_clk) is
variable internal_state : std_logic_vector(7 downto 0) := (others =&gt; '0'); -- 8 bit shift register for sampling the ps2 clock signal
begin
	if(sys_clk'event AND sys_clk='0') then
		internal_state := ps2_clk &amp; internal_state (7 downto 1);
	end if;
	if internal_state = "11111111" then
		synced &lt;= '1';
	elsif internal_state = "00000000" then
		synced &lt;= '0';
	end if;	
end process;

END TypeArchitecture;
</vhdl>
  <vhdl name="ps2_simulator">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY ps2_simulator IS&#13;
  PORT (&#13;
	sys_clk : IN std_logic;
	ps2_ser : OUT std_logic;
	ps2_clk : OUT std_logic
    );&#13;
END ps2_simulator;&#13;
&#13;

ARCHITECTURE TypeArchitecture OF ps2_simulator IS&#13;
&#13;signal continue : natural := 1;
BEGIN&#13;

ser: process(sys_clk)
variable code : std_logic_vector(10 downto 0) := "10000101100";
variable i : natural := 0;
begin
	if sys_clk'event and sys_clk='1' and i&lt;11 then 
		ps2_ser &lt;= code(i mod 11);
		i := i+1;
		if i = 10 then 
			continue &lt;= 0;
		end if;
	end if;
end process ser;

clk: process(sys_clk)
begin
	if continue = 1 then
		ps2_clk &lt;= sys_clk;
	end if;
end process clk;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="ps2_simulator_bench">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY ps2_simulator_bench IS&#13;
  PORT (&#13;
  
    max        : OUT std_logic;                    -- output bit example&#13;
    cpt        : OUT std_logic_vector(3 DOWNTO 0)  -- output vector example&#13;
    );&#13;
END ps2_simulator_bench;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF ps2_simulator_bench IS&#13;
&#13;
BEGIN&#13;
process 
begin
&#13;	for i in 1 to 10 loop
		max&lt;='0';
		wait for 10 ns;
		max&lt;='1';
		wait for 10 ns;
	end loop;
&#13;wait;
end process;
END TypeArchitecture;&#13;
</vhdl>
</project>
